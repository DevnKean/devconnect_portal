<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Lead;
use AppBundle\Entity\LeadNote;
use AppBundle\Entity\LeadSupplier;

/**
 * LeadSupplierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LeadSupplierRepository extends \Doctrine\ORM\EntityRepository
{
    public function findExpiredLeads($supplier)
    {
        $qb = $this->createQueryBuilder('ls');

        $qb
            ->andWhere('ls.result = :result')
            ->andWhere('ls.supplier = :supplier')
            ->andWhere('ls.leadStatus != :leadStatus ')
            ->setParameter('result', LeadSupplier::RESULT_LOST)
            ->setParameter('leadStatus', LeadNote::getArchivedStatus())
            ->setParameter('supplier', $supplier);

        return $qb->getQuery()->getResult();
    }


    public function findArchivedLeads($supplier)
    {
        $qb = $this->createQueryBuilder('ls');

        $qb
            ->andWhere('ls.result = :result')
            ->andWhere('ls.supplier = :supplier')
            ->andWhere('ls.leadStatus = :leadStatus')
            ->setParameter('result', LeadSupplier::RESULT_LOST)
            ->setParameter('leadStatus', LeadNote::getArchivedStatus())
            ->setParameter('supplier', $supplier);

        return $qb->getQuery()->getResult();
    }

    public function findNewLeads($supplier)
    {
        $qb = $this->createQueryBuilder('ls');

        $qb
            ->join('ls.lead', 'll')
            ->andWhere($qb->expr()->in('ll.status', ':status'))
            ->andWhere($qb->expr()->isNull('ls.result'))
            ->andWhere('ls.leadStatus = :leadStatus')
            ->andWhere('ls.supplier = :supplier')
            ->setParameter('status', Lead::STATUS_APPROVE)
            ->setParameter('leadStatus', LeadNote::getInitialStatus())
            ->setParameter('supplier', $supplier);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $supplier
     *
     * @return array
     */
    public function findActiveLeads($supplier)
    {
        $qb = $this->createQueryBuilder('ls');

        $qb
            ->join('ls.lead', 'll')
            ->andWhere('ll.status = :status')
            ->andWhere($qb->expr()->isNull('ls.result'))
            ->andWhere($qb->expr()->in('ls.leadStatus', ':leadStatus'))
            ->andWhere('ls.supplier = :supplier')
            ->setParameter('status', Lead::STATUS_APPROVE)
            ->setParameter('leadStatus', LeadNote::getActiveStatuses())
            ->setParameter('supplier', $supplier);


        return $qb->getQuery()->getResult();
    }

    /**
     * @param $supplier
     *
     * @return int
     */
    public function getExpiredLeadsCount($supplier)
    {
        $result = $this->findExpiredLeads($supplier);
        return count($result);
    }

    /**
     * @param $supplier
     *
     * @return int
     */
    public function getActiveLeadsCount($supplier)
    {
        $result = $this->findActiveLeads($supplier);
        return count($result);
    }

    /**
     * @param $supplier
     *
     * @return int
     */
    public function getNewLeadsCount($supplier)
    {
        $result = $this->findNewLeads($supplier);
        return count($result);
    }
}
